#!/usr/bin/env ruby

class MetasploitModule < Msf::Auxiliary

  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

    def initialize(info = {})
        super(update_info(info,
        'Name'     => 'custom port scanner',
        'Description' => %q{
            This module performs comprehensive TCP port scanning across
            specified ranges to identify accessible network services.
        },
        'Author'   => [ 'Anomaliszt' ],
        'License'  => MSF_LICENSE))

        register_options(
            [
                Opt::RHOST(),
                OptInt.new('STARTPORT', [true, 'Beginning of port range to scan', 1]),
                OptInt.new('ENDPORT', [true, 'End of port range to scan', 1024]),
                OptInt.new('RPORT',     [false, 'Not used but required by framework', 0])
            ]
        )
    end
      
    def run_host(ip)
        start_port = datastore['STARTPORT']
        end_port = datastore['ENDPORT']
        open_ports = []

        print_status("Initiating port scan on target #{ip}\n")

        (start_port..end_port).each { |port|
            begin
                connect(false, { 'RHOST' => ip, 'RPORT' => port })
                print_good("#{ip}:#{port} - TCP port #{port} accessible on #{ip}")
                open_ports << port
            rescue Rex::ConnectionError
            ensure
                disconnect(sock) if sock
            end
        }

        if open_ports.any?
            print_status("Discovered open ports on #{ip}: #{open_ports.join(', ')}")
        else
            print_status("No accessible ports detected on #{ip} within range #{datastore['STARTPORT']} - #{datastore['ENDPORT']}")
        end
    end
end
